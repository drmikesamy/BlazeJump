@using BlazeJump.Common.Enums;
@using BlazeJump.Common.Models;
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Crypto;
@using BlazeJump.Helpers;
@using Newtonsoft.Json
@inject IMessageService MessageService
@inject NavigationManager NavManager

<section>
	<article class="card card-message">
		<div class="profile-picture">
			<img src="@($"{User?.ProfilePic ?? $"/images/profilepics/{new Random().Next(1, 18)}.png"}")" alt="profile picture">
		</div>
		<div class="card-body">
			<h3>
				<a @onclick=ViewUser style="cursor: pointer">@(User?.Username ?? $"{User?.Id?.Substring(0, 10)}...")</a>
			</h3>
			<p class="subtle-info-line">
				@(TimeAgo.GetTimeAgo(NEvent.CreatedAtDateTime))
			</p>
			@ParseEmbeds.ParseEmbedsFromContent(NEvent?.Content).FirstOrDefault()
			<p>@(NEvent?.Content ?? "(No content)")</p>
			<p class="stats-line">
				<a @onclick=ViewMessage style="cursor: pointer">@ReplyCount comments</a> |
				@if (NEvent?.Verified ?? false)
				{
					<span>Verified</span>
				}
				else
				{
					<a @onclick="() => VerifyMessage(NEvent)" style="cursor: pointer">Verify</a>
				}
			</p>
		</div>
	</article>
</section>

@code {
	[Parameter]
	public NMessage Message { get; set; }
	public NEvent NEvent => Message.Event;
	public User User => MessageService.Users.ContainsKey(NEvent.Pubkey) ? MessageService.Users[NEvent.Pubkey] : null;
	public int ReplyCount => MessageService.NMessages.ContainsKey($"{TemplateAreaEnum.Replies}_{Message.SubscriptionId}") ?
		MessageService.NMessages[$"{TemplateAreaEnum.Replies}_{Message.SubscriptionId}"]
		.Where(m => m.Event.ParentNEventId == NEvent.Id).Count() : 0;
	public void ViewUser()
	{
		NavManager.NavigateTo($"user/{User?.Id}", true);
	}
	public void ViewMessage()
	{
		NavManager.NavigateTo($"event/{NEvent.Id}", true);
	}
	public void VerifyMessage(NEvent message)
	{
		message.Verified = MessageService.VerifyNEvent(NEvent);
		StateHasChanged();
	}
}