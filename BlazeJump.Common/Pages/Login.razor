@page "/Login"
@using BlazeJump.Common.Helpers;
@using BlazeJump.Common.Models.Crypto;
@using BlazeJump.Common.Pages.Components
@using BlazeJump.Common.Services.Connections;
@using BlazeJump.Common.Services.Crypto;
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Notification;
@using BlazeJump.Common.Services.Identity;
@using BlazeJump.Common.Services.UserProfile;
@using System.Drawing.Imaging;
@using System.Drawing;
@using System.IO;
@using QRCoder;
@using System.Runtime.InteropServices;
@using System.Web;
@using BlazeJump.Common.Enums;
@using Newtonsoft.Json;
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService
@inject INotificationService NotificationService
@inject IIdentityService IdentityService
@inject IUserProfileService UserProfileService
<div class="background-container">
	<div class="content-container">
		<Card>
			@if (IdentityService.Platform == PlatformEnum.Web)
			{
				<h2>Log in using your phone</h2>
				<p>Scan QR Code with your phone to log in or create a new account</p>
				<div class="qr-code-container">
					@if (string.IsNullOrEmpty(TempPubKey))
					{
						@if (!CodeLoading)
						{
							<img src="data:image/jpeg;base64,@ImageData" class="qr-code" />
						}
						else
						{
							<div class="qr-code qr-code-loading">
								<div class="wave"></div>
								<div class="wave"></div>
								<div class="wave"></div>
								<div class="wave"></div>
								<div class="wave"></div>
								<div class="wave"></div>
								<div class="wave"></div>
								<div class="wave"></div>
								<div class="wave"></div>
							</div>
						}
					}
				</div>
			}
			else if (TempPubKey != null && TempRelay != null)
			{
				<p>Received connect request from pubkey: @TempPubKey</p>
				<p>Send to: @TempRelay</p>
			}
		</Card>
	</div>
</div>
@code {
	public string? ImageData { get; set; }
	public Secp256k1KeyPair? KeyPair { get; set; }
	[Parameter]
	public string? TempPubKey { get; set; }
	[Parameter]
	public string? TempRelay { get; set; }
	public bool CodeLoading { get; set; } = false;
	protected override async Task OnInitializedAsync()
	{
		CodeLoading = true;
		//1. Generate temporary key pair
		await Task.Run(() =>
			{
				GenerateTemporaryKeyPair();
			});
		CodeLoading = false;
		//2. QR Code is presented to user containing a link to mobile login page with public key & selected relay where they will continue.
		//3. In the mean time lets start polling the nostr relay for collecting the confirmation
	}

	public async Task GenerateTemporaryKeyPair()
	{
		CryptoService.CreateEtherealKeyPair();
		var payload = new QrConnectEventArgs
			{
				Relay = HttpUtility.UrlEncode(RelayManager.RelayConnections.First().Key),
				Pubkey = Convert.ToHexString(CryptoService.EtherealPublicKey.ToXOnlyPubKey().ToBytes())
			};
		var payloadString = JsonConvert.SerializeObject(payload);
		ImageData = BlazeJump.Common.Helpers.QRCode.GenerateQRCode(payloadString);
		await IdentityService.FetchLoginScanResponse(payload);
	}
}