@page "/"
@page "/{PageType}/{Hex}"
@using BlazeJump.Common.Enums;
@using BlazeJump.Common.Pages.Components
@using BlazeJump.Common.Services.Connections;
@using BlazeJump.Common.Models;
@using BlazeJump.Common.Services.Crypto;
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Notification;
@using BlazeJump.Common.Services.UserProfile;
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService
@inject INotificationService NotificationService;

<div class="background-container">
	<div class="content-container">
		@if (MessageService.Users.FirstOrDefault(u => u.Id == Hex) != null)
		{
			<UserCard User="MessageService.Users.FirstOrDefault(u => u.Id == Hex)"></UserCard>
		}
		@foreach (var message in MessageService.NEvents)
		{
			<MessageCard Message=message></MessageCard>
		}
		@if (MessageService.NEvents.Count() == 0)
		{
			<Card>
				<p>Nothing to see here. Click <NavLink href="user/82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2">here</NavLink> for Jack Dorsey's profile.</p>
			</Card>
		}
		@if(MessageService.NEvents.Count() >= 5)
		{
			<Card>
				<a @onclick="() => MessageService.FetchReplies(new List<string>{ Hex }, MessageService.NEvents.Last().CreatedAtDateTime.AddMilliseconds(-1))">Load more</a>
			</Card>
		}
	</div>
</div>

@code {
	public bool Loading { get; set; } = false;
	public string NewNEventInput { get; set; } = string.Empty;

	public Dictionary<string, bool> ActiveSubscriptions = new Dictionary<string, bool>();
	[Parameter]
	public string? PageType { get; set; }
	[Parameter]
	public string? Hex { get; set; }
	public User? User { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		MessageService.StateUpdated += UpdateState;
		NotificationService.Loading = true;
		await Load();
		NotificationService.Loading = false;
	}

	public void UpdateState(object? o, EventArgs e)
	{
		StateHasChanged();
	}

	public async Task Load(DateTime? endDate = null, bool append = false)
	{
		if (PageType != null && Hex != null)
		{
			if (PageType.ToLowerInvariant() == PageTypeEnum.User.ToString().ToLowerInvariant())
			{
				await MessageService.FetchUserPage(Hex);
			}
			else if (PageType.ToLowerInvariant() == PageTypeEnum.Event.ToString().ToLowerInvariant())
			{
				await MessageService.FetchEventPage(Hex);
			}
		}
	}
}