@page "/"
@page "/{PageType}/{Hex}"
@using BlazeJump.Common.Enums;
@using BlazeJump.Common.Pages.Components
@using BlazeJump.Common.Services.Connections;
@using BlazeJump.Common.Models;
@using BlazeJump.Common.Services.Crypto;
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Notification;
@using BlazeJump.Common.Services.UserProfile;
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService
@inject INotificationService NotificationService;

<div class="background-container">
	<div class="content-container">
		@if (User != null)
		{
			<UserCard User="User"></UserCard>
		}
		@foreach (var message in MessageList)
		{
			<MessageCard Message=message></MessageCard>
			@if (message.Id == MessageList.Last().Id)
			{
				<div><a style="cursor: pointer" @onclick="() => Load(message.CreatedAtDateTime, true)">Load more</a></div>
			}
		}
		@if (MessageList.Count() == 0)
		{
			<Card>
				<p>Nothing to see here. Click <NavLink href="user/82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2">here</NavLink> for Jack Dorsey's profile.</p>
			</Card>
		}
	</div>
</div>

@code {
	public bool Loading { get; set; } = false;
	public string NewNEventInput { get; set; } = string.Empty;
	public List<NEvent> MessageList { get; set; } = new List<NEvent>();

	public Dictionary<string, bool> ActiveSubscriptions = new Dictionary<string, bool>();
	[Parameter]
	public string? PageType { get; set; }
	[Parameter]
	public string? Hex { get; set; }
	public User? User { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		NotificationService.Loading = true;
		await Load();
		NotificationService.Loading = false;
	}

	public async Task Load(DateTime? endDate = null, bool append = false)
	{
		if (PageType != null && Hex != null)
		{
			var filter = new Filter
				{
					Kinds = new int[] { (int)KindEnum.Text },
					Since = DateTime.Now.AddYears(-20),
					Until = endDate ?? DateTime.Now.AddDays(1),
					Limit = 5
				};
			if (PageType.ToLowerInvariant() == PageTypeEnum.User.ToString().ToLowerInvariant())
			{
				filter.Authors = new List<string>();
				filter.Authors.Add(Hex);
				var messageList = await MessageService.FetchNEventsByFilter(filter, true);
				if (append)
				{
					MessageList.AddRange(messageList);
				}
				else
				{
					MessageList = messageList;
					User = (await MessageService.FetchProfiles(new List<string> { Hex })).FirstOrDefault();
					MessageList.ForEach(m => m.User = User);
				}
			}
			else if (PageType.ToLowerInvariant() == PageTypeEnum.Event.ToString().ToLowerInvariant())
			{
				filter.Ids = new List<string> { Hex };
				MessageList = await MessageService.FetchNEventsByFilter(filter, false, true);
				var baseProfileId = MessageList.Select(m => m.Pubkey);
				var replyProfileIds = MessageList.SelectMany(m => m.ChildNEvents).Select(m => m.Pubkey);
				var allProfileIds = baseProfileId.Concat(replyProfileIds).Distinct().ToList();
				var users = await MessageService.FetchProfiles(allProfileIds);
				MessageList.ForEach(m => m.User = users.FirstOrDefault(u => u.Id == m.Pubkey));
				MessageList.SelectMany(m => m.ChildNEvents).ToList().ForEach(m => m.User = users.FirstOrDefault(u => u.Id == m.Pubkey));
				User = users.FirstOrDefault(u => u.Id == baseProfileId.FirstOrDefault());
			}
			else
			{

			}
		}
	}
}