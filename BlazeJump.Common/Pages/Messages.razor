@page "/"
@page "/{PageType}/{Hex}"
@using BlazeJump.Common.Enums;
@using BlazeJump.Common.Pages.Components
@using BlazeJump.Common.Services.Connections;
@using BlazeJump.Common.Models;
@using BlazeJump.Common.Services.Crypto;
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Notification;
@using BlazeJump.Common.Services.UserProfile;
@using System.Text.Json
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService
@inject INotificationService NotificationService;
@inject NavigationManager NavManager;

<div class="background-container">
    <div class="content-container">
        @if (PageTypeParsed != null
             && Hex != null
             && MessageService.MessageStore.TryGetValue(Hex, out var featuredMessage)
             && featuredMessage != null)
        {
            @if (PageTypeParsed == PageTypeEnum.User)
            {
                <UserCard UserEvent=featuredMessage!.Event!></UserCard>
            }

            @if (MessageService.RelationRegister.TryGetRelation(Hex, RelationTypeEnum.TopLevelSubscription, out var topLevelSubscriptions)
                 && MessageService.RelationRegister.TryGetRelations(topLevelSubscriptions, RelationTypeEnum.Guid, out var topLevelEventIds))
            {
                @foreach (var eventId in topLevelEventIds)
                {
                    @if (MessageService.MessageStore.TryGetValue(eventId, out var message)
                         && message!.Event!.Kind == KindEnum.Text)
                    {
                        <MessageCard Message=message></MessageCard>
                    }
                }
            }
            @if (PageTypeParsed.Value == PageTypeEnum.User)
            {
                <Card>
                    <a @onclick="() => _ = MessageService.FetchPage(Hex, PageTypeEnum.User, false)">Load more</a>
                </Card>
            }
        }
        @if (Hex == null)
        {
            <Card>
                <label for="userLookup">
                    Start typing a username or hex to add a user:
                </label>
                <input 
                    id="userLookup" 
                    type="text"
                    @bind="_searchString" 
                    @bind:event="oninput" 
                    @bind:after="UpdateSearch"
                />
            </Card>
            @if (MessageService.RelationRegister.TryGetRelation(_searchString, RelationTypeEnum.UserLookup, out var guid)
                 && MessageService.RelationRegister.TryGetRelation(guid.First(), RelationTypeEnum.UserGuid, out var userIds))
            {
                @foreach (var userId in userIds)
                {
                    @if (MessageService.MessageStore.TryGetValue(userId, out var user))
                    {
                        <UserCard UserEvent=user!.Event!></UserCard>
                    }
                }
            }
        }
    </div>
</div>