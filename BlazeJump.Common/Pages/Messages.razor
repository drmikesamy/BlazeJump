@page "/"
@page "/{RootId}"
@using System.Text
@using BlazeJump.Common.Enums;
@using BlazeJump.Common.Pages.Components
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Notification;
@inject IMessageService MessageService
@inject INotificationService NotificationService;

<div class="background-container">
    <div class="content-container">
        @if (HexRootId != null
             && MessageService.MessageStore.TryGetValue(HexRootId, out var rootMessage))
        {
            @if (rootMessage?.Event?.Kind == KindEnum.Metadata)
            {
                <UserCard UserEvent=rootMessage!.Event!></UserCard>
            }
            else if (rootMessage?.Event?.Kind == KindEnum.Text)
            {
                <MessageCard Message=rootMessage Styling="featured"></MessageCard>
                <Card>
                    <input id="messageToSend"
                           type="text"
                           @bind="_messageToSend"/>
                    <button @onclick="() => MessageService.Send(KindEnum.Text, _messageToSend)">Send</button>
                </Card>
            }

            @if (MessageService.RelationRegister.TryGetRelation(HexRootId, RelationTypeEnum.EventChildren, out var topLevelEventIds)
                 || MessageService.RelationRegister.TryGetRelation(HexRootId, RelationTypeEnum.EventsByUser, out topLevelEventIds))
            {
                @foreach (var eventId in topLevelEventIds)
                {
                    @if (MessageService.MessageStore.TryGetValue(eventId, out var message)
                         && message!.Event!.Kind == KindEnum.Text)
                    {
                        <MessageCard Message=message></MessageCard>
                        @if (eventId == topLevelEventIds.Last())
                        {
                            <Card>
                                <a @onclick="() => _ = MessageService.FetchPage(HexRootId, message.Event.CreatedAtDateTime.AddMicroseconds(-1))">Load more</a>
                            </Card>
                        }
                    }
                }
            }
        }
        @if (HexRootId == null)
        {
            <Card>
                <label for="userLookup">
                    Start typing a username or hex to add a user:
                </label>
                <input
                    id="userLookup"
                    type="text"
                    @bind="_searchString"
                    @bind:event="oninput"
                    @bind:after="UpdateSearch"/>
            </Card>
            @if (MessageService.RelationRegister.TryGetRelation(_searchString, RelationTypeEnum.SearchToSubscriptionId, out var guid)
                 && MessageService.RelationRegister.TryGetRelation(guid.First(), RelationTypeEnum.SubscriptionGuidToIds, out var userIds))
            {
                @foreach (var userId in userIds)
                {
                    @if (MessageService.MessageStore.TryGetValue(userId, out var user))
                    {
                        <UserCard UserEvent=user!.Event!></UserCard>
                    }
                }
            }
        }
    </div>
</div>


@* <table border="1"> *@
@*     <thead> *@
@*     <tr> *@
@*         <th>Key</th> *@
@*         <th>Type</th> *@
@*         <th>Value</th> *@
@*     </tr> *@
@*     </thead> *@
@*     <tbody> *@
@*     @foreach (var relation in MessageService.RelationRegister.Relationships) *@
@*     { *@
@*         @foreach (var relationItem in relation.Value) *@
@*         { *@
@*             <tr> *@
@*                 <td>@relation.Key.ToString()</td> *@
@*                 <td>@relationItem.Key.ToString()</td> *@
@*                 <td> *@
@*                     @foreach (var value in relationItem.Value) *@
@*                     { *@
@*                         @value.Key.ToString()<br/> *@
@*                     } *@
@*                 </td> *@
@*             </tr> *@
@*         } *@
@*     } *@
@*     </tbody> *@
@* </table> *@