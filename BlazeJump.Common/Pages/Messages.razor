@page "/"
@page "/{PageType}/{Hex}"
@using BlazeJump.Common.Enums;
@using BlazeJump.Common.Pages.Components
@using BlazeJump.Common.Services.Connections;
@using BlazeJump.Common.Models;
@using BlazeJump.Common.Services.Crypto;
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Notification;
@using BlazeJump.Common.Services.UserProfile;
@using Newtonsoft.Json
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService
@inject INotificationService NotificationService;

<div class="background-container">
	<div class="content-container">

		@if (PageType?.ToLowerInvariant() == PageTypeEnum.User.ToString().ToLowerInvariant())
		{
			@if (MessageService.Users.ContainsKey(Hex))
			{
				<UserCard User="MessageService.Users[Hex]"></UserCard>
			}
		}
		@foreach (var eventBodyId in EventBodyIds)
		{
			@if (MessageService.NMessages.ContainsKey(eventBodyId))
			{
				@foreach (var message in MessageService.NMessages[eventBodyId])
				{
					<MessageCard Message=message></MessageCard>
				}
			}
		}
		@if (EventBodyIds.Count() > 0 && MessageService.NMessages.ContainsKey(EventBodyIds.Last()) && MessageService.NMessages[EventBodyIds.Last()].Count >= 5)
		{
			<Card>
				<a @onclick="() => Load(true)">Load more</a>
			</Card>
		}
		@if (Hex == null)
		{
			<Card>
				<p>Nothing to see here. Click <NavLink href="user/82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2">here</NavLink> for Jack Dorsey's profile.</p>
			</Card>
		}
	</div>
</div>

@code {
	public List<string> EventBodyIds { get; set; } = new List<string>();
	public string NewNEventInput { get; set; } = string.Empty;

	[Parameter]
	public string? PageType { get; set; }
	[Parameter]
	public string? Hex { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		MessageService.StateUpdated += UpdateState;
		NotificationService.Loading = true;
		await Load();
		NotificationService.Loading = false;
	}

	public void UpdateState(object? o, EventArgs e)
	{
		StateHasChanged();
	}

	public async Task Load(bool loadMore = false)
	{
		if(!loadMore)
			EventBodyIds.Clear();
		if (PageType != null && Hex != null)
		{
			var isEventPage = PageType.ToLowerInvariant() == PageTypeEnum.Event.ToString().ToLowerInvariant();
			var filters = new List<Filter>();
			if (isEventPage && !loadMore)
			{
				filters.Add(new Filter
					{
						Kinds = new int[] { (int)KindEnum.Text },
						Since = DateTime.Now.AddYears(-20),
						Until = DateTime.Now.AddDays(1),
						Limit = 1,
						EventIds = new List<string> { Hex },
					});
			}
			filters.Add(new Filter
				{
					Kinds = new int[] { (int)KindEnum.Text },
					Since = DateTime.Now.AddYears(-20),
					Until = loadMore ? MessageService.NMessages[EventBodyIds.Last()].Last().Event.CreatedAtDateTime.AddMilliseconds(-1) : DateTime.Now.AddDays(1),
					Limit = 5,
					TaggedEventIds = isEventPage ? new List<string> { Hex } : null,
					Authors = isEventPage ? null : new List<string> { Hex }
				});
			var fetchId = $"{(isEventPage ? TemplateAreaEnum.Event.ToString().ToLowerInvariant() : TemplateAreaEnum.User.ToString().ToLowerInvariant())}_{Hex.Substring(0, 30)}_{EventBodyIds.Count()}";
			await MessageService.FetchNEventsByFilter(MessageTypeEnum.Req, filters, fetchId);
			EventBodyIds.Add(fetchId);
		}

	}
}