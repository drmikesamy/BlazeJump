@page "/"
@page "/{PageType}/{Hex}"
@using BlazeJump.Common.Enums;
@using BlazeJump.Common.Pages.Components
@using BlazeJump.Common.Services.Connections;
@using BlazeJump.Common.Models;
@using BlazeJump.Common.Services.Crypto;
@using BlazeJump.Common.Services.Message;
@using BlazeJump.Common.Services.Notification;
@using BlazeJump.Common.Services.UserProfile;
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService
@inject INotificationService NotificationService;

<div class="background-container">
	<div class="content-container">

		@if (PageType?.ToLowerInvariant() == PageTypeEnum.User.ToString().ToLowerInvariant())
		{
			@if (MessageService.Users.ContainsKey(Hex))
			{
				<UserCard User="MessageService.Users[Hex]"></UserCard>
			}

			@foreach (var eventBodyId in EventBodyIds)
			{
				@if (MessageService.NMessages.ContainsKey(eventBodyId))
				{
					@foreach (var message in MessageService.NMessages[eventBodyId])
					{
						<MessageCard Message=message.Event></MessageCard>
					}
				}
			}
			@if (MessageService.NMessages.ContainsKey(EventBodyIds.Last()) && MessageService.NMessages[EventBodyIds.Last()].Count >= 5)
			{
				<Card>
					<a @onclick="LoadMore">Load more</a>
				</Card>
			}
		}

		@if (PageType?.ToLowerInvariant() == PageTypeEnum.Event.ToString().ToLowerInvariant())
		{
			@if (MessageService.NMessages.ContainsKey(EventHeaderId))
			{
				<MessageCard Message="MessageService.NMessages[EventHeaderId].First().Event"></MessageCard>
			}

			@foreach (var eventBodyId in EventBodyIds)
			{
				@if (MessageService.NMessages.ContainsKey(eventBodyId))
				{
					@foreach (var message in MessageService.NMessages[eventBodyId])
					{
						<MessageCard Message=message.Event></MessageCard>
					}
				}
			}
			@if (MessageService.NMessages.ContainsKey(EventBodyIds.Last()) && MessageService.NMessages[EventBodyIds.Last()].Count >= 5)
			{
				<Card>
					<a @onclick="LoadMore">Load more</a>
				</Card>
			}
		}

		@if (Hex == null)
		{
			<Card>
				<p>Nothing to see here. Click <NavLink href="user/82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2">here</NavLink> for Jack Dorsey's profile.</p>
			</Card>
		}

	</div>
</div>

@code {
	public string EventHeaderId { get; set; } = Guid.NewGuid().ToString();
	public List<string> EventBodyIds { get; set; } = new List<string> { Guid.NewGuid().ToString() };

	public bool Loading { get; set; } = false;
	public string NewNEventInput { get; set; } = string.Empty;

	[Parameter]
	public string? PageType { get; set; }
	[Parameter]
	public string? Hex { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		MessageService.StateUpdated += UpdateState;
		NotificationService.Loading = true;
		await Load();
		NotificationService.Loading = false;
	}

	public void UpdateState(object? o, EventArgs e)
	{
		StateHasChanged();
	}

	public async Task Load()
	{
		EventHeaderId = Guid.NewGuid().ToString();
		EventBodyIds = new List<string> { Guid.NewGuid().ToString() };
		if (PageType != null && Hex != null)
		{
			if (PageType.ToLowerInvariant() == PageTypeEnum.User.ToString().ToLowerInvariant())
			{
				var userHeaderFilter = new Filter
					{
						Kinds = new int[] { (int)KindEnum.Metadata },
						Since = DateTime.Now.AddYears(-20),
						Until = DateTime.Now.AddDays(1),
						Limit = 1,
						Authors = new List<string> { Hex }
					};
				await MessageService.FetchNEventsByFilter(MessageTypeEnum.Req, userHeaderFilter, $"{TemplateAreaEnum.User}_{Guid.NewGuid().ToString()}");
				var eventBodyFilter = new Filter
					{
						Kinds = new int[] { (int)KindEnum.Text },
						Since = DateTime.Now.AddYears(-20),
						Until = DateTime.Now.AddDays(1),
						Limit = 5,
						Authors = new List<string> { Hex }
					};
				await MessageService.FetchNEventsByFilter(MessageTypeEnum.Req, eventBodyFilter, EventBodyIds[0]);
			}
			else if (PageType.ToLowerInvariant() == PageTypeEnum.Event.ToString().ToLowerInvariant())
			{
				var eventHeaderFilter = new Filter
					{
						Kinds = new int[] { (int)KindEnum.Text },
						Since = DateTime.Now.AddYears(-20),
						Until = DateTime.Now.AddDays(1),
						Limit = 1,
						Ids = new List<string> { Hex }
					};
				await MessageService.FetchNEventsByFilter(MessageTypeEnum.Req, eventHeaderFilter, EventHeaderId);
				var eventBodyFilter = new Filter
					{
						Kinds = new int[] { (int)KindEnum.Text },
						Since = DateTime.Now.AddYears(-20),
						Until = DateTime.Now.AddDays(1),
						Limit = 5,
						EventId = new List<string> { Hex }
					};
				await MessageService.FetchNEventsByFilter(MessageTypeEnum.Req, eventBodyFilter, EventBodyIds[0]);
			}
		}

	}
	public async Task LoadMore()
	{
		var isEventPage = PageType.ToLowerInvariant() == PageTypeEnum.Event.ToString().ToLowerInvariant();
		var newGuid = Guid.NewGuid().ToString();
		var eventBodyFilter = new Filter
			{
				Kinds = new int[] { (int)KindEnum.Text },
				Since = DateTime.Now.AddYears(-20),
				Until = MessageService.NMessages[EventBodyIds.Last()].Last().Event.CreatedAtDateTime.AddMilliseconds(-1),
				Limit = 5,
				Ids = isEventPage ? new List<string> { Hex } : null,
				Authors = !isEventPage ? new List<string> { Hex } : null,
			};
		EventBodyIds.Add(newGuid);
		await MessageService.FetchNEventsByFilter(MessageTypeEnum.Req, eventBodyFilter, newGuid);
	}
}