@using BlazeJump.Client.Enums;
@using BlazeJump.Client.Models;
@using BlazeJump.Client.Services.Message;
@inject IMessageService MessageService

<div class="box">
    @if (Message.ParentNEvent != null)
    {
            <MessageCard Message=Message.ParentNEvent></MessageCard>
    }
    <div class="card box">
        <div class="profile-picture">
            <img src="@($"images/profilepics/{Message.User?.ProfilePic ?? ""}.png")" alt="profile picture">
        </div>
        <div class="card-body">
            <h3>
                @(Message.Pubkey ?? "")
            </h3>
            <p>@(Message.Content ?? "")</p>
            <p>
                @(Message.CreatedAtDateTime) | <img src="./images/layout/loader.gif" style="@(Loading ? "display: inline-block" : "display: none")" /><a @onclick="ShowHideComments" style="cursor: pointer; @(Loading ? "display: none" : "display: inline-block")">@Message.ReplyCount comments</a>
@*                @if(Message.Reactions?.Count() > 0)
                {
                    @foreach (var reaction in Message.Reactions.GroupBy(r => r.Content))
                    {
                        @($"  {reaction.FirstOrDefault()?.Content} {reaction.Count()}")
                    }
                }
                else
                {
                    <a @onclick="LoadReactions" style="cursor: pointer; @(Loading ? "display: none" : "display: inline-block")">@Message.ReactionCount reactions</a>
                }*@
            </p>
        </div>
    </div>
    @if (ShowComments)
    {
        @foreach (var child in Message.ChildNEvents)
        {
            <MessageCard Message=child></MessageCard>
        }
    }
</div>

@code {
    [Parameter]
    public NEvent Message { get; set; }
    public bool Loading { get; set; } = false;
    public bool ShowComments { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        await LoadCommentCounts();
        Loading = false;
    }

    public async Task ShowHideComments() {
        if (!ShowComments && Message.ChildNEvents.Count() == 0)
        {
            var filter = new Filter
                {
                    Kinds = new int[] { (int)KindEnum.Text },
                    Since = DateTime.Now.AddYears(-20),
                    Until = DateTime.Now,
                    EventId = new List<string> { Message.Id }
                };
            Message.ChildNEvents = await MessageService.FetchNEventsByFilter(filter);
        }

        ShowComments = !ShowComments;
        StateHasChanged();
    }

    public async Task LoadCommentCounts()
    {
        var filter = new Filter
            {
                Kinds = new int[] { (int)KindEnum.Text },
                Since = DateTime.Now.AddYears(-20),
                Until = DateTime.Now,
                EventId = new List<string> { Message.Id }
            };
        Message.ReplyCount = await MessageService.FetchStatsByFilter(filter);
    }
}