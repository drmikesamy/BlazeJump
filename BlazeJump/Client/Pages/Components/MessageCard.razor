@using BlazeJump.Client.Models;
@using BlazeJump.Client.Services.Message;
@inject IMessageService MessageService

<div class="box">

    <div class="card box">
        <div class="profile-picture">
            <img src="@($"images/profilepics/{Message.User?.ProfilePic ?? ""}.png")" alt="profile picture">
        </div>
        <div class="card-body">
            <h3>
                @(Message.Pubkey ?? "")
            </h3>
            <p>@(Message.Content ?? "")</p>
            <p>
                @(Message.CreatedAtDateTime) | <img src="./images/layout/loader.gif" style="@(Loading ? "display: inline-block" : "display: none")" /><a @onclick="ShowHideComments" style="cursor: pointer; @(Loading ? "display: none" : "display: inline-block")">@(Message.ReplyCount > 10 ? "10+" : Message.ReplyCount) comments</a>
                @foreach (var reaction in Message.Reactions.GroupBy(r => r.Content))
                {
                    @($"  {reaction.FirstOrDefault()?.Content} {reaction.Count()}")
                }
            </p>
        </div>
    </div>
    @if (ShowComments)
    {
        @foreach (var child in Message.ChildNEvents)
        {
            <MessageCard Message=child></MessageCard>
        }
    }
</div>

@code {
    [Parameter]
    public NEvent Message { get; set; }
    public bool Loading { get; set; } = false;
    public bool ShowComments { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        await LoadChildNEvents();
        Loading = false;
    }
    public void ShowHideComments() {
        ShowComments = !ShowComments;
        StateHasChanged();
    }

    public async Task LoadChildNEvents()
    {
        Message.ChildNEvents = await MessageService.FetchNEventsByParentId(Message.Id);
    }
}