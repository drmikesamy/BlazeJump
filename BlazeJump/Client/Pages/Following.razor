@page "/Following"
@using BlazeJump.Client.Enums;
@using BlazeJump.Client.Pages.Components
@using BlazeJump.Client.Services.Connections;
@using BlazeJump.Client.Models;
@using BlazeJump.Client.Services.Crypto;
@using BlazeJump.Client.Services.Message;
@using BlazeJump.Client.Services.UserProfile;
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService



@code {
	public bool Loading { get; set; } = false;
	public string NewNEventInput { get; set; } = string.Empty;
	public List<User> UserList { get; set; } = new List<User>();
	[Parameter]
	public string? PageType { get; set; }
	[Parameter]
	public string? Hex { get; set; }
	public User? User { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await Load();
	}

	public async Task Load(DateTime? endDate = null, bool append = false)
	{
		Loading = true;
		var ownPubKey = await CryptoService.GetPublicKey();
		var filter = new Filter
			{
				Kinds = new int[] { (int)KindEnum.Metadata },
				Since = DateTime.Now.AddYears(-20),
				Until = endDate ?? DateTime.Now.AddDays(1),
				Limit = 10,
				Search = "jack"
			};
		var messageList = await MessageService.FetchNEventsByFilter(filter, true);
		Loading = false;
		StateHasChanged();
	}
}