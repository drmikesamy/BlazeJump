@page "/"
@page "/{PageType}/{Hex}"
@using BlazeJump.Client.Enums;
@using BlazeJump.Client.Pages.Components
@using BlazeJump.Client.Services.Connections;
@using BlazeJump.Client.Models;
@using BlazeJump.Client.Services.Crypto;
@using BlazeJump.Client.Services.Message;
@using BlazeJump.Client.Services.UserProfile;
@inject IRelayManager RelayManager
@inject IMessageService MessageService
@inject ICryptoService CryptoService

<div class="loading-modal" style="@(Loading ? "display: block" : "display: none")">
	@foreach (var Connection in RelayManager.RelayConnections)
	{
		@Connection.Key
		<br />
	}
</div>

<div class="content-container">
	@if(User != null)
	{
		<UserCard User="User"></UserCard>
	}
	@foreach (var message in MessageList)
	{
		<MessageCard Message=message></MessageCard>
		@if (message.Id == MessageList.Last().Id)
		{
			<div><a style="cursor: pointer" @onclick="() => Load(message.CreatedAtDateTime, true)">Load more</a></div>
		}
	}
</div>

@code {
	public bool Loading { get; set; } = false;
	public string NewNEventInput { get; set; } = string.Empty;
	public List<NEvent> MessageList { get; set; } = new List<NEvent>();

	public Dictionary<string, bool> ActiveSubscriptions = new Dictionary<string, bool>();
	[Parameter]
	public string? PageType { get; set; }
	[Parameter]
	public string? Hex { get; set; }
	public User? User { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await Load();
	}

	public async Task Load(DateTime? endDate = null, bool append = false)
	{
		Loading = true;
		var ownPubKey = await CryptoService.GetPublicKey();
		if (PageType != null && Hex != null)
		{
			var filter = new Filter
				{
					Kinds = new int[] { (int)KindEnum.Text },
					Since = DateTime.Now.AddYears(-20),
					Until = endDate ?? DateTime.Now.AddDays(1),
					Limit = 5
				};
			if (PageType.ToLowerInvariant() == PageTypeEnum.User.ToString().ToLowerInvariant())
			{
				filter.Authors = new List<string>();
				filter.Authors.Add(Hex);
				if (!string.IsNullOrEmpty(ownPubKey))
				{
					filter.Authors.Add(ownPubKey);
				}
				var messageList = await MessageService.FetchNEventsByFilter(filter, true);
				if (append)
				{
					MessageList.AddRange(messageList);
				}
				else
				{
					MessageList = messageList;
					User = (await MessageService.FetchProfiles(new List<string> { Hex })).FirstOrDefault();
					MessageList.ForEach(m => m.User = User);
				}
			}
			else if (PageType.ToLowerInvariant() == PageTypeEnum.Event.ToString().ToLowerInvariant())
			{
				filter.Ids = new List<string> { Hex };
				MessageList = await MessageService.FetchNEventsByFilter(filter, false, true);
				var baseProfileId = MessageList.Select(m => m.Pubkey);
				var replyProfileIds = MessageList.SelectMany(m => m.ChildNEvents).Select(m => m.Pubkey);
				var allProfileIds = baseProfileId.Concat(replyProfileIds).Distinct().ToList();
				var users = await MessageService.FetchProfiles(allProfileIds);
				MessageList.ForEach(m => m.User = users.FirstOrDefault(u => u.Id == m.Pubkey));
				MessageList.SelectMany(m => m.ChildNEvents).ToList().ForEach(m => m.User = users.FirstOrDefault(u => u.Id == m.Pubkey));
				User = users.FirstOrDefault(u => u.Id == baseProfileId.FirstOrDefault());
			}
			else
			{

			}
		}
		Loading = false;
		StateHasChanged();
	}

	public async Task SendNEvent()
	{
		var newNEvent = await MessageService.GetNewNEvent(Enums.KindEnum.Text, NewNEventInput, null);
		await MessageService.SendNEvent(newNEvent, ActiveSubscriptions.Keys.First());
	}
}